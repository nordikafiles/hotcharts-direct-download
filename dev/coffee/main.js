// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var connect, getProperties, getVolume, jsonRequest, nfmusic, openMedia, playPause, rpcURL, stop, wake;

  console.log("Port: ");

  console.log(document.querySelector("#port"));

  nfmusic = (function() {
    function nfmusic() {}

    nfmusic.send = function(name, value) {
      var ev;
      ev = new CustomEvent(name, {
        detail: {
          type: "FROM_EXTENSION",
          value: value
        }
      });
      return document.querySelector("#port").dispatchEvent(ev);
    };

    nfmusic.on = function(eventName, callback) {
      return document.querySelector("#port").addEventListener(eventName, function(e) {
        var res;
        res = function(data) {
          return nfmusic.send(eventName + "_res", data);
        };
        if (e.detail.type === "FROM_PAGE") {
          return callback(e.detail.value, res);
        }
      });
    };

    return nfmusic;

  })();

  setInterval(function() {
    return nfmusic.send("msg", "Hello, world!!!");
  }, 1000);

  nfmusic.on("openMedia", function(data, cb) {
    return openMedia(data, cb);
  });

  nfmusic.on("playPause", function(data, cb) {
    console.log("PlayPause");
    return playPause(cb);
  });

  nfmusic.on("stop", function(data, cb) {
    return stop(cb);
  });

  rpcURL = "http://192.168.1.33/jsonrpc";

  jsonRequest = function(content, callback) {
    var xhr;
    xhr = new XMLHttpRequest;
    xhr.open("POST", rpcURL);
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.send(JSON.stringify(content));
    return xhr.onload = function() {
      return callback.call(xhr, xhr.response);
    };
  };

  openMedia = function(url, callback) {
    return jsonRequest({
      jsonrpc: "2.0",
      method: "Player.Open",
      params: {
        item: {
          file: url
        }
      },
      id: 1
    }, callback);
  };

  playPause = function(callback) {
    return jsonRequest({
      jsonrpc: "2.0",
      method: "Player.PlayPause",
      params: {
        playerid: 0
      },
      id: 1
    }, callback);
  };

  stop = function(callback) {
    return jsonRequest({
      jsonrpc: "2.0",
      method: "Player.Stop",
      params: {
        playerid: 0
      },
      id: 1
    }, callback);
  };

  wake = function(callback) {
    return jsonRequest({
      jsonrpc: "2.0",
      method: "Input.ExecuteAction",
      params: {
        action: "noop"
      },
      id: 1
    }, callback);
  };

  getProperties = function(callback) {
    return jsonRequest({
      jsonrpc: "2.0",
      method: "Player.GetProperties",
      params: {
        properties: ["time", "totaltime", "speed"]
      },
      id: 1
    }, callback);
  };

  getVolume = function(callback) {
    return jsonRequest({
      jsonrpc: "2.0",
      method: "Application.GetProperties",
      params: {
        properties: ["volume"]
      },
      id: 1
    }, function(data) {
      return callback(JSON.parse(data).result.volume / 100);
    });
  };

  connect = function(callback) {
    return jsonRequest({
      jsonrpc: "2.0",
      method: "Application.GetProperties",
      params: {
        properties: ["volume"]
      },
      id: 1
    }, function(data) {
      if (JSON.parse(data).result === "OK") {
        console.log("Connected to " + rpcURL);
        return callback(true);
      }
    });
  };

  setInterval(function() {
    return getVolume(function(volume) {
      console.log("Volume: " + volume);
      return nfmusic.send("volume", volume);
    });
  }, 1000);

  setInterval(function() {
    return getProperties(function(data) {
      var ret;
      data = JSON.parse(data);
      if (!data.result) {
        return;
      }
      ret = {
        time: (data.result.time.hours * 3600) + (data.result.time.minutes * 60) + data.result.time.seconds + (data.result.time.milliseconds / 1000),
        duration: (data.result.totaltime.hours * 3600) + (data.result.totaltime.minutes * 60) + data.result.totaltime.seconds + (data.result.totaltime.milliseconds / 1000),
        paused: !(speed > 0)
      };
      return nfmusic.send("timeupdate", ret);
    });
  }, 200);

}).call(this);
